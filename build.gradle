buildscript {
    ext.kotlin_version = '1.5.20'

    repositories {
        maven { url 'https://dl.bintray.com/jetbrains/intellij-plugin-service' }
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.7.3'
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
}

group 'cn.te0.flutter-getx-starter'

def pluginVersionSuffix = ''

// must!!!
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.freemarker:freemarker:2.3.31'
    implementation 'org.yaml:snakeyaml:1.28'

    implementation 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    version '2021.1'
    updateSinceUntilBuild false

    def requiredPlugins = ['yaml']
    if (ideaVersionPrefix != '' && ideaVersionPrefix.toInteger() >= 192) {
        requiredPlugins.add('java')
    }
    plugins = requiredPlugins
}

patchPluginXml {
    version(pluginVersion + pluginVersionSuffix)
    changeNotes """
      <b>1.0.14</b>
      <ul>
        <li>Add SVG support.</li>
      </ul>
      <br/>
      <b>1.0.13</b>
      <ul>
        <li>Fix resources no package can't load image.</li>
      </ul>
      <br/>
      <b>1.0.12</b>
      <ul>
        <li>Fix List<dynamic> has a don't exist import.</li>
      </ul>
      <br/>
      <b>1.0.11</b>
      <ul>
        <li>Auto parse JSON string fields to object.</li>
      </ul>
      <br/>
      <b>1.0.10</b>
      <ul>
        <li>Json to dart bean support whether inner class.</li>
      </ul>
      <br/>
      <b>1.0.9</b>
      <ul>
        <li>Add more parameters for dart template.</li>
      </ul>
      <br/>
    """
}

publishPlugin {
    channels = ['Stable']
    token = "$System.env.ORG_GRADLE_PROJECT_INTELLIJ_PUBLISH_TOKEN"
}

def productMatrixFile = "${projectDir.absolutePath}/product-matrix.json"
def jsonFile = new File(productMatrixFile)
if (jsonFile == null) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Unable to read $productMatrixFile, is it missing?")
}

// Fail if the product details file isn't found.
// noinspection UnnecessaryQualifiedReference
def productMatrix = new groovy.json.JsonSlurper().parseText(jsonFile.text)
if (productMatrix == null || !(productMatrix instanceof Map)) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Unable to read $productMatrixFile.")
}

// If an ideaVersionPrefix is provided, search for the first matched product and use that.
if (ideaVersionPrefix != '') {
    def productMatrixKeys = productMatrix.keySet() as String[]
    for (productMatrixKey in productMatrixKeys) {
        if (productMatrixKey != null && productMatrixKey.startsWith("${ideaVersionPrefix}.")) {
            ideaVersion = productMatrixKey
            break
        }
    }
}

// Fail if requested version is unsupported.
if (!productMatrix.containsKey(ideaVersion)) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Requested IDEA version is unsupported: $ideaVersion")
}

// Determine which branch we're building for.
def productDetails = productMatrix[ideaVersion]
if (productDetails == null || !(productDetails instanceof Map)) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Product details for IDEA version $ideaVersion is missing or invalid.")
}

// Adjust plugin's output file name.
rootProject.setBuildDir("${rootProject.buildDir}/${productDetails.comments}")

System.out.println(
        "\nBuilding plugin ${(pluginVersion + pluginVersionSuffix)} for IDEA " +
                "version $ideaVersion (branch ${productDetails.comments})\n"
)
System.out.println("Since: ${productDetails.sinceBuild}")
System.out.println("Until: ${productDetails.untilBuild}")
System.out.println("Dart: ${productDetails.dartPluginVersion}")
System.out.println("Flutter: ${productDetails.flutterPluginVersion}\n")
System.out.println("Artifacts output directory: ${rootProject.buildDir}\n")

// Adjust plugin build settings.
intellij.version = ideaVersion
intellij.plugins += "Kotlin"
intellij.plugins += "Dart:${productDetails.dartPluginVersion}"
intellij.plugins += "io.flutter:${productDetails.flutterPluginVersion}"
patchPluginXml.sinceBuild = productDetails.sinceBuild
patchPluginXml.untilBuild = productDetails.untilBuild